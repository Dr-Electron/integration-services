"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[9195],{78588:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return h}});var r=t(83117),a=t(80102),i=(t(67294),t(3905)),o=["components"],l={},s="Authorize Channel",c={unversionedId:"examples/authorize-to-channel",id:"examples/authorize-to-channel",title:"Authorize Channel",description:"The example-6",source:"@site/external/integration-services/documentation/docs/examples/authorize-to-channel.md",sourceDirName:"examples",slug:"/examples/authorize-to-channel",permalink:"/integration-services/integration-services/examples/authorize-to-channel",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Create Channel",permalink:"/integration-services/integration-services/examples/create-channel"},next:{title:"Search Channel and Validate Data",permalink:"/integration-services/integration-services/examples/search-channel-and-validate-data"}},u=[{value:"Subscribe to a channel",id:"subscribe-to-a-channel",children:[],level:2},{value:"Authorize a subscription",id:"authorize-a-subscription",children:[],level:2},{value:"Write to a channel",id:"write-to-a-channel",children:[],level:2},{value:"Read from a channel",id:"read-from-a-channel",children:[],level:2}],p={toc:u};function h(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"authorize-channel"},"Authorize Channel"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/integration-services/blob/develop/clients/node/examples/6-AuthorizeToChannel.ts"},"example-6"),"\nscript performs the following tasks:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"create two identities: ",(0,i.kt)("inlineCode",{parentName:"li"},"Owner")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"User")),(0,i.kt)("li",{parentName:"ul"},"you authorize each identity against Integration Services API (different clients)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Owner")," create a channel and write data on it"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"User")," try to read but fails (because it has no access)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"User")," request subscription"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Owner")," find unapproved subscription and approves it"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"User")," send data to the channel"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Owner")," is able to read data (second message sent by ",(0,i.kt)("inlineCode",{parentName:"li"},"User"),") from that channel")),(0,i.kt)("p",null,"You can run the example with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm run example-6\n")),(0,i.kt)("h2",{id:"subscribe-to-a-channel"},"Subscribe to a channel"),(0,i.kt)("p",null,"In the example the ",(0,i.kt)("inlineCode",{parentName:"p"},"userClient")," try to read from a channel while it didn't have read/write permission: this will raise exception. The correct way is to first request subscription"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Request subscription to the channel as the user. The returned subscriptionLink can be used to authorize the user to the channel.\nconst { subscriptionLink } = await userClient.requestSubscription(channelAddress, {\n    accessRights: AccessRights.ReadAndWrite\n});\n")),(0,i.kt)("h2",{id:"authorize-a-subscription"},"Authorize a subscription"),(0,i.kt)("p",null,"In order to allow ",(0,i.kt)("inlineCode",{parentName:"p"},"userClient")," to read/write on that channel, its subscription need to be authorized:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// Find subscriptions to the channel that are not already authorized.\nconst subscriptions = await ownerClient.findAllSubscriptions(channelAddress, false);\n\nconst unauthorizedSubscriptions = subscriptions.filter(subscription => !subscription.isAuthorized)\n\nfor (const subscription of unauthorizedSubscriptions) {\n    // Authorize the user to the channel. \n    // Authorization can happen via the id of the user or the generated subscription link.\n    const keyloadLink = await ownerClient.authorizeSubscription(channelAddress, {\n        id: channelUser.doc.id\n    });\n    console.log("Subscription Keyload Link:", keyloadLink)\n}\n')),(0,i.kt)("h2",{id:"write-to-a-channel"},"Write to a channel"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"userClient")," can now write on a channel any JSON payload:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Writing data to the channel as the channel owner.\nawait ownerClient.write(channelAddress, {\n    payload: { log: `This is log file 1` }\n});\n")),(0,i.kt)("h2",{id:"read-from-a-channel"},"Read from a channel"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"userClient")," can finally read messages successfully:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const channelData = await userClient.read(channelAddress);\n")))}h.isMDXComponent=!0},3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=c(t),d=a,m=h["".concat(s,".").concat(d)]||h[d]||p[d]||i;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);