version: '3.7'

services:
  mongo:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_DATABASE: ${DATABASE_NAME}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongodb_data_container:/data/db

  initialize-job:
    build: .
    environment:
      API_VERSION: v1
      NETWORK: main
      DATABASE_NAME: ${DATABASE_NAME}
      IOTA_PERMA_NODE: https://nodes.iota.org:443
      EXPLORER: https://explorer.iota.org/mainnet/transaction
      DATABASE_URL: ${DATABASE_URL}
      SERVER_SECRET: ${SERVER_SECRET}
    restart: on-failure
    command: node dist/index.js keygen
    depends_on:
      - mongo

  api:
    build: .
    environment:
      PORT: 3000
      API_VERSION: v1
      NETWORK: main
      DATABASE_NAME: ${DATABASE_NAME}
      IOTA_PERMA_NODE: https://nodes.iota.org:443
      EXPLORER: https://explorer.iota.org/mainnet/transaction
      DATABASE_URL: ${DATABASE_URL}
      SERVER_SECRET: ${SERVER_SECRET}
    restart: always
    command: npm run serve
    volumes:
      - ./:/usr/src/app
    depends_on:
      - mongo
      - initialize-job
    ports:
      - 3000:3000

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # - ./prometheus/data:/prometheus:rw
      - ./prometheus/rules:/etc/prometheus/rules
    ports:
      - '9090:9090/tcp'
    depends_on:
      - api

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    volumes:
      - ./config.ini:/etc/grafana/config.ini
      - ./dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - 3090:3000
    depends_on:
      - 'prometheus'

volumes:
  mongodb_data_container:
